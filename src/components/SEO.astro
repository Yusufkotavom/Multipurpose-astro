---
export interface Props {
  title?: string;
  description?: string;
  image?: string;
  canonical?: string;
  type?: 'website' | 'article' | 'profile';
  publishedTime?: string;
  modifiedTime?: string;
  author?: string;
  section?: string;
  tags?: string[];
}

const { 
  title, 
  description, 
  image, 
  canonical, 
  type = 'website',
  publishedTime,
  modifiedTime,
  author,
  section,
  tags = []
} = Astro.props;

import siteConfig from '../../../config/site.config';

const pageTitle = title ? `${title} - ${siteConfig.title}` : siteConfig.title;
const pageDescription = description || siteConfig.description;
const pageImage = image || `${siteConfig.url}/og-image.jpg`;
const pageUrl = canonical || Astro.url.href;
---

<!-- Primary Meta Tags -->
<title>{pageTitle}</title>
<meta name="title" content={pageTitle} />
<meta name="description" content={pageDescription} />
<meta name="author" content={author || siteConfig.author} />
<meta name="robots" content="index, follow" />
<meta name="language" content={siteConfig.language} />
<meta name="revisit-after" content="7 days" />

<!-- Canonical URL -->
<link rel="canonical" href={pageUrl} />

<!-- Open Graph / Facebook -->
<meta property="og:type" content={type} />
<meta property="og:url" content={pageUrl} />
<meta property="og:title" content={pageTitle} />
<meta property="og:description" content={pageDescription} />
<meta property="og:image" content={pageImage} />
<meta property="og:site_name" content={siteConfig.title} />
<meta property="og:locale" content="id_ID" />

<!-- Twitter -->
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content={pageUrl} />
<meta property="twitter:title" content={pageTitle} />
<meta property="twitter:description" content={pageDescription} />
<meta property="twitter:image" content={pageImage} />

<!-- Additional Meta Tags -->
<meta name="viewport" content="width=device-width, initial-scale=1.0" />
<meta name="theme-color" content="#3b82f6" />

<!-- Article specific meta tags -->
{type === 'article' && publishedTime && (
  <meta property="article:published_time" content={publishedTime} />
)}
{type === 'article' && modifiedTime && (
  <meta property="article:modified_time" content={modifiedTime} />
)}
{type === 'article' && author && (
  <meta property="article:author" content={author} />
)}
{type === 'article' && section && (
  <meta property="article:section" content={section} />
)}
{type === 'article' && tags.length > 0 && (
  tags.map(tag => <meta property="article:tag" content={tag} />)
)}

<!-- Google Analytics -->
{siteConfig.seo.googleAnalytics && (
  <script async src={`https://www.googletagmanager.com/gtag/js?id=${siteConfig.seo.googleAnalytics}`}></script>
)}
{siteConfig.seo.googleAnalytics && (
  <script>
    window.dataLayer = window.dataLayer || [];
    function gtag(){dataLayer.push(arguments);}
    gtag('js', new Date());
    gtag('config', '{siteConfig.seo.googleAnalytics}');
  </script>
)}

<!-- Google Tag Manager -->
{siteConfig.seo.googleTagManager && (
  <script>
    (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
    new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
    j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
    'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
    })(window,document,'script','dataLayer','{siteConfig.seo.googleTagManager}');
  </script>
)}